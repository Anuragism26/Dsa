#include <iostream>
#include <string>
#include <vector>

using namespace std;

class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        // If the input vector is empty, there is no common prefix.
        if (strs.empty()) {
            return "";
        }

        // Start with the first string as the initial common prefix.
        string prefix = strs[0];

        // Iterate through the rest of the strings in the vector.
        for (size_t i = 1; i < strs.size(); ++i) {
            // Compare the current string with the common prefix.
            // We use .find() to see if the prefix exists at the beginning of the current string.
            while (strs[i].find(prefix) != 0) {
                // If it doesn't match, shorten the prefix by one character from the end.
                prefix = prefix.substr(0, prefix.length() - 1);
                
                // If the prefix becomes empty, there is no common prefix among all strings.
                if (prefix.empty()) {
                    return "";
                }
            }
        }
        
        return prefix;
    }
};

int main() {
    Solution s;
    vector<string> test1 = {"flower", "flow", "flight"};
    cout << "Longest common prefix for {\"flower\", \"flow\", \"flight\"} is: " << s.longestCommonPrefix(test1) << endl;

    vector<string> test2 = {"dog", "racecar", "car"};
    cout << "Longest common prefix for {\"dog\", \"racecar\", \"car\"} is: " << s.longestCommonPrefix(test2) << endl;

    vector<string> test3 = {"apple", "apricot", "application"};
    cout << "Longest common prefix for {\"apple\", \"apricot\", \"application\"} is: " << s.longestCommonPrefix(test3) << endl;

    return 0;
}